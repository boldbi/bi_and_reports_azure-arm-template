@inject ServerPrincipal _identityResponse
@{
    var globalAppSettings = _globalAppSettings;
    var userId = _identityResponse.User.UserId;
    var isAdmin = _identityResponse.IsAdmin;
    var isMobile = new DeviceDetection(Context).IsMobile;
    var dashboardUrl = Url.Action("Reports", "Reports");
    var downloadUrl = dashboardUrl.TrimEnd('/').Remove(dashboardUrl.LastIndexOf('/'));
    var downloadReportUrl = downloadUrl + "/items/download";
    var isBlob = globalAppSettings.SystemSettings.StorageType;
    var isMasterTenant = globalAppSettings.SystemSettings.IsMaster;
    var isHideIconBasedOnDnsName = GlobalAppSettings.IsUrlInDnsList(globalAppSettings.DisplayUri);
    var customUI = globalAppSettings.SystemSettings.CustomUI;
    var iscustomUIProfile = customUI?.Profiles != null && customUI.Profiles[0].Reports != null;
    var schemes = iscustomUIProfile ? customUI.Schemes.Where(x => x.Name == customUI.Profiles[0].Reports.Scheme).FirstOrDefault() : null;
    var hideMenusAndOptions = iscustomUIProfile && !isAdmin && customUI.Profiles[0].Reports.HideMenusAndOptions;
    var hideDownload = iscustomUIProfile && (hideMenusAndOptions || customUI.Profiles[0].Reports.HideDownload || !(schemes?.Download ?? true));
    var hideEdit = iscustomUIProfile && (hideMenusAndOptions || customUI.Profiles[0].Reports.HideEdit || !(schemes?.Edit ?? true));
    var hideMakePublic = iscustomUIProfile && (hideMenusAndOptions || customUI.Profiles[0].Reports.HideMakePublic || !(schemes?.MakePublic ?? true));
    var hideMakePrivate = iscustomUIProfile && (hideMenusAndOptions || customUI.Profiles[0].Reports.HideMakePrivate || !(schemes?.MakePrivate ?? true));
    var hideGetLink = iscustomUIProfile && (hideMenusAndOptions || customUI.Profiles[0].Reports.HideGetLink || !(schemes?.GetLink ?? true));
    var hideViews = iscustomUIProfile && (hideMenusAndOptions || customUI.Profiles[0].Reports.HideViews || !(schemes?.Views ?? true));
    var hideViewSchedules = iscustomUIProfile && (hideMenusAndOptions || customUI.Profiles[0].Reports.HideViewSchedules || !(schemes?.ViewSchedules ?? true));
    var hideInfo = iscustomUIProfile && (hideMenusAndOptions || customUI.Profiles[0].Reports.HideInfo || !(schemes?.Info ?? true));
    var hideProcessingOptions = iscustomUIProfile && (hideMenusAndOptions || customUI.Profiles[0].Reports.HideProcessingOptions || !(schemes?.ProcessingOptions ?? true));
    var hideMove = iscustomUIProfile && (hideMenusAndOptions || customUI.Profiles[0].Reports.HideMove || !(schemes?.Move ?? true));
    var hideCopy = iscustomUIProfile && (hideMenusAndOptions || customUI.Profiles[0].Reports.HideCopy || !(schemes?.Copy ?? true));
    var hideClone = iscustomUIProfile && (hideMenusAndOptions || customUI.Profiles[0].Reports.HideClone || !(schemes?.Clone ?? true));
    var hideCreateSchedule = iscustomUIProfile && (hideMenusAndOptions || customUI.Profiles[0].Reports.HideCreateSchedule || !(schemes?.CreateSchedule ?? true));
    var hideVersionHistory = iscustomUIProfile && (hideMenusAndOptions || customUI.Profiles[0].Reports.HideVersionHistory || !(schemes?.VersionHistory ?? true));
    var hideUpdate = iscustomUIProfile && (hideMenusAndOptions || customUI.Profiles[0].Reports.HideUpdate || !(schemes?.Update ?? true));
    var hideEditAsXml = iscustomUIProfile && (hideMenusAndOptions || customUI.Profiles[0].Reports.HideEditAsXml || !(schemes?.EditAsXml ?? true));
    var hideDelete = iscustomUIProfile && (hideMenusAndOptions || customUI.Profiles[0].Reports.HideDelete || !(schemes?.Delete ?? true));
    var hideExport = iscustomUIProfile && (hideMenusAndOptions || customUI.Profiles[0].Reports.HideExport || !(schemes?.Export ?? true));
    var hideShare = iscustomUIProfile && (hideMenusAndOptions || customUI.Profiles[0].Reports.HideShare || !(schemes?.Share ?? true));
    var hideOpen = iscustomUIProfile && (hideMenusAndOptions || customUI.Profiles[0].Reports.HideOpen || !(schemes?.Open ?? true));
    var hidePublish = iscustomUIProfile && (hideMenusAndOptions || customUI.Profiles[0].Reports.HidePublish || !(schemes?.Publish ?? true));
    var hideContextMenu = iscustomUIProfile && (hideMenusAndOptions || customUI.Profiles[0].Reports.HideContextMenu || !(schemes?.ContextMenu ?? true));
    var hideMoveBlockSeparator = hideMove && hideCopy && hideClone;
    var hideEditBlockSeparator = hideEditAsXml && hideUpdate && hideDelete && hideExport;
}
<script nonce="@Context.Items["ScriptNonce"]">
    var dashboardGrid;
    var filter = [];
</script>

<div id="items">
</div>

<script nonce="@Context.Items["ScriptNonce"]" type="text/x-jsrender" id="favorite">
    <span title='{{:IsFavorite ? "[[[Remove from Favorites]]]" : "[[[Add to Favorites]]]"}}' data-is-favorite="{{:IsFavorite}}" data-item-id="{{:Id}}" class='{{:IsFavorite ? "su-favorite" : "su-dis-favorite"}}' id="toggle-favorite-report"></span>
</script>

<script nonce="@Context.Items["ScriptNonce"]" type="text/x-jsrender" id="description">
    <div class="item-description grid-content" title="{{:~renderDoubleQuotes(Description)}}" data-bs-toggle="tooltip" data-bs-placement="top">
        <span>
            {{>Description}}
        </span>
    </div>
</script>

<script nonce="@Context.Items["ScriptNonce"]" type="text/x-jsrender" id="category">
    <span title="{{:CategoryName}}" data-bs-toggle="tooltip" data-bs-placement="top">
        {{>CategoryName}}
    </span>
</script>

<script nonce="@Context.Items["ScriptNonce"]" type="text/x-jsrender" id="createdbydisplayname">
    <span title="{{:CreatedByDisplayName}}" data-bs-toggle="tooltip" data-bs-placement="top">
        {{>CreatedByDisplayName}}
    </span>
</script>

<script nonce="@Context.Items["ScriptNonce"]" type="text/x-jsrender" id="gridhoveroptions">
    <div class="grid-hover" data-bs-toggle="tooltip" data-bs-placement="top">
        {{if !IsDraft && @(Convert.ToBoolean(hideOpen).ToString().ToLower()) == false }}
            <a class="dashboard-open grid-hover-options " title="[[[Open]]]" href="@dashboardUrl/{{:Id}}/{{:CategoryName}}/{{:Name}}?showmyreports=1" target="_blank">
                <i class="su su-external-link"></i>
            </a>
        {{/if}}
       {{if (CanWrite || @(Convert.ToBoolean(isAdmin).ToString().ToLower()) == true) && !IsDraft && @(Convert.ToBoolean(hideEdit).ToString().ToLower()) == false }}
           <span class="grid-hover-options" title="[[[Edit]]]" data-item-id="{{:Id}}" data-item-name="{{:Name}}" data-category-name="{{:CategoryName}}" id="edit-report">
             <i class="su su-edit"></i>
           </span>
       {{/if}}
       {{if ((CreatedById == @(userId) || @(Convert.ToBoolean(isAdmin).ToString().ToLower()) == true) && ~checkTablet() && IsDraft) && @(Convert.ToBoolean(hideEdit).ToString().ToLower()) == false }}
           <span class="grid-hover-options" title="[[[Edit]]]" data-item-id="{{:Id}}" data-item-name="{{:Name}}" id="edit-draft-report">
             <i class="su su-edit"></i>
           </span>
       {{/if}}
       {{if !IsDraft && @(Convert.ToBoolean(hideShare).ToString().ToLower()) == false }}
       {{if @(Convert.ToBoolean(isHideIconBasedOnDnsName).ToString().ToLower()) == false && (@(Convert.ToBoolean(isAdmin).ToString().ToLower()) == true || hasDashboardSharePermission || CreatedById == @(userId))}}
           <span class="item-permissions grid-hover-options" title="[[[Share]]]" data-created-by-id="{{:CreatedById}}" data-extension="{{:Extension}}" data-is-public="{{:IsPublic}}" data-item-id="{{:Id}}" data-item-name="{{:Name}}" data-category-name="{{:CategoryName}}" data-item-type="{{:ItemType}}" id="share-report-permission">
                <i class="su su-share"></i>
           </span>
       {{/if}}
       {{/if}}  
    </div>
</script>

<script nonce="@Context.Items["ScriptNonce"]" type="text/x-jsrender" id="itemname">
    <div class="item-name grid-content" title="{{:Name}}" data-bs-toggle="tooltip" data-bs-placement="top">
        {{if !IsDraft}}
            <a href="@Url.Action("Reports", "Reports")/{{:Id}}/{{:CategoryName}}/{{:Name}}" style="max-width: 100%;vertical-align: middle;" target="_blank">
                <span>
                    {{>Name}}
                </span>
            </a>
        {{else}}
            <a href="@Url.Action("ReportDesigner", "Designer")/{{:Id}}/draft/{{:Name}}" style="max-width: 100%;vertical-align: middle;" target="_blank">
                <span>
                    {{>Name}}
                </span>
            </a>
        {{/if}}
    </div>
</script>

<script nonce="@Context.Items["ScriptNonce"]" type="text/x-jsrender" id="options">
    <div class="dropdown context-menu">
        {{if @(Convert.ToBoolean(hideContextMenu).ToString().ToLower()) == false }}
        <span class="dropdown-toggle option-icon" title="[[[Actions]]]" data-bs-toggle="dropdown">
            <i class="su su-options"></i>
        </span>
        {{/if}}
        <ul class="dropdown-menu dashboard-options" role="menu">
            {{if !IsDraft}}
            {{if CreatedById==@(userId) || @(Convert.ToBoolean(isAdmin).ToString().ToLower()) == true}}
            {{if @(Convert.ToBoolean(ServerAppConfig.IsSelfHosted).ToString().ToLower()) == true && @(Convert.ToBoolean(ServerAppConfig.EnablePublic).ToString().ToLower()) == false && IsPublic && @(Convert.ToBoolean(hideMakePrivate).ToString().ToLower()) == false }}
            <li>
                <a href="#" ispublic="{{:IsPublic}}" data-item-type="{{:ItemType}}" data-item-name="{{:Name}}" data-item-id="{{:Id}}" class="remove-public option-click" id="remove-public-grid">
                <i class="su su-remove-public"><span class="su-remove-public path1"></span><span class="su-remove-public path2"></span><span class="su-remove-public path3"></span></i>
                <span>[[[Make Private]]]</span>
                </a>
            </li>
            {{/if}}
            {{if @(Convert.ToBoolean(ServerAppConfig.IsSelfHosted).ToString().ToLower()) == false || @(Convert.ToBoolean(ServerAppConfig.EnablePublic).ToString().ToLower()) == true}}
            {{if @(Convert.ToBoolean(hideMakePublic).ToString().ToLower()) == false || @(Convert.ToBoolean(hideMakePrivate).ToString().ToLower()) == false }}
            <li>
                {{if !IsPublic && @(Convert.ToBoolean(hideMakePublic).ToString().ToLower()) == false }}
                <a href="#" ispublic="{{:IsPublic}}" data-item-type="{{:ItemType}}" data-item-name="{{:Name}}" data-item-id="{{:Id}}" data-url="{{:~fileUrlEncode(Id)}}" class="make-public option-click" id="make-public-grid">
                    <i class="su su-public"></i>
                    <span>[[[Make Public]]]</span>
                </a>
                {{/if}}
                {{if IsPublic && @(Convert.ToBoolean(hideMakePrivate).ToString().ToLower()) == false }}
                <a href="#" ispublic="{{:IsPublic}}" data-item-type="{{:ItemType}}" data-item-name="{{:Name}}" data-item-id="{{:Id}}" class="remove-public option-click" id="remove-public-grid">
                <i class="su su-remove-public"><span class="su-remove-public path1"></span><span class="su-remove-public path2"></span><span class="su-remove-public path3"></span></i>
                <span>[[[Make Private]]]</span>
                </a>
                {{/if}}
            </li>
            {{/if}}
            {{/if}}
            {{/if}}
            {{if @(Convert.ToBoolean(hideGetLink).ToString().ToLower()) == false }}
            <li>
                <a href="#" data-item-type="{{:ItemType}}" data-item-id="{{:Id}}" data-name="{{:Name}}" data-category="{{:CategoryName}}" class="option-click" id="get-item-link">
                    <i class="su su-link"></i>
                    <span>[[[Get Link]]]</span>
                </a>
            </li>
            {{/if}}
            {{if (CanDownload || @(Convert.ToBoolean(isAdmin).ToString().ToLower())) && !IsLocked && @(Convert.ToBoolean(hideDownload).ToString().ToLower()) == false }}
            <li>
                <a href="@downloadReportUrl/{{:ItemType}}/{{:Id}}/{{:CategoryName}}/{{:Name}}" id="download-report">
                    <i class="su su-download"></i>
                    <span>[[[Download Report]]]</span>
                </a>
            </li>
            {{/if}}
            {{if ~checkTablet()}}
            {{if (@(Convert.ToBoolean(ServerAppConfig.EnableViewsInReportsMenu).ToString().ToLower()) == true) && @(Convert.ToBoolean(hideViews).ToString().ToLower()) == false }}
                <li class="dropdown dashboard-views" data-load="true" >
                    <a href="#" data-item-id="{{:Id}}" child-dashboard="{{:IsChildDashboard}}"  category-id="{{:CategoryId}}" parent-category-name="{{:ParentCategoryName}}" category-name="{{:CategoryName}}" data-item-name="{{:Name}}" class="dropdown-toggle views" data-bs-toggle="dropdown" id="report-views">
                        <i class="su su-filter"></i>
                        <span>[[[Views]]]</span>
                    </a>
                    <ul class="dropdown-menu item-views no-padding" role="menu">
                        <li>
                            <span class="view-name" href="#">
                                [[[Loading...]]]
                            </span>
                        </li>
                    </ul>
                </li>
            {{/if}}
            {{if @(Convert.ToBoolean(hideViewSchedules).ToString().ToLower()) == false }}    
                {{if (@(Convert.ToBoolean(isHideIconBasedOnDnsName).ToString().ToLower()) == false)}}
                <li>
                    <a class="view-scheduless option-click" href="@Url.Action("Schedules", "Scheduler")?report={{:Name}}" data-item-name="{{:Name}}" target="_blank" id="view-schedules">
                        <i class="su su-nav-schedule"></i>
                        <span>[[[View Schedules]]]</span>
                    </a>
                </li>
                {{/if}}
            {{/if}}
            {{/if}}
            {{if @(Convert.ToBoolean(hideInfo).ToString().ToLower()) == false }}
            <li>
                <a href="#" class="openInfo option-click" data-item-name="{{:Name}}" data-description="{{:~renderDoubleQuotes(Description)}}" data-item-id="{{:Id}}" data-createdByDisplayName="{{:CreatedByDisplayName}}" data-createdDate="{{:CreatedDate}}" data-modifiedByFullName="{{:ModifiedByFullName}}" data-modifiedDate="{{:ModifiedDate}}" data-categoryName="{{:CategoryName}}" data-isDraft="{{:IsDraft}}" data-itemType="{{:ItemType}}">
                    <i class="su su-info"></i>
                    <span>[[[Info]]]</span>
                </a>
            </li>
            {{/if}}
            {{if @(Convert.ToBoolean(ServerAppConfig.IsSelfHosted).ToString().ToLower()) == true }}
            {{if (CanWrite || @(Convert.ToBoolean(isAdmin).ToString().ToLower())) && ~checkTablet() && !IsLocked && @(Convert.ToBoolean(hideProcessingOptions).ToString().ToLower()) == false }}
            <li role="separator" class="divider"></li>
            <li>
                <a href="#" class="ProcessOption option-click" data-item-id="{{:Id}}" data-name="{{:Name}}" data-category="{{:CategoryName}}" id="report-processing-option">
                    <i class="su su-cache_3"></i>
                    <span>[[[Processing Options]]]</span>
                </a>
            </li>
            {{/if}}
            {{/if}}
            {{if (CanMove || CanCopy || CanClone) && ~checkTablet() && !IsLocked && @(Convert.ToBoolean(hideMoveBlockSeparator).ToString().ToLower()) == false }}
            <li role="separator" class="divider"></li>
            {{/if}}
            {{if (CanMove || @(Convert.ToBoolean(isAdmin).ToString().ToLower())) && ~checkTablet() && !IsLocked && @(Convert.ToBoolean(hideMove).ToString().ToLower()) == false }}
            <li>
                <a href="#" data-item-id="{{:Id}}" data-action="Move" class="option-click" id="move-report">
                    <i class="su su-move"></i>
                    <span>[[[Move]]]</span>
                </a>
            </li>
            {{/if}}
            {{if (CanCopy || @(Convert.ToBoolean(isAdmin).ToString().ToLower())) && ~checkTablet() && !IsLocked && @(Convert.ToBoolean(hideCopy).ToString().ToLower()) == false }}
            <li>
                <a href="#" data-item-id="{{:Id}}" data-action="Copy" class="option-click" id="copy-report">
                    <i class="su su-copy"></i>
                    <span>[[[Copy]]]</span>
                </a>
            </li>
            {{/if}}
            {{if (@(Convert.ToBoolean(ServerAppConfig.EnableClone).ToString().ToLower()) == true) && (CanClone || @(Convert.ToBoolean(isAdmin).ToString().ToLower())) && ~checkTablet() && !IsLocked && @(Convert.ToBoolean(hideClone).ToString().ToLower()) == false }}
            <li>
                <a href="#" data-item-id="{{:Id}}" data-action="Clone" class="option-click" id="clone-report">
                    <i class="su su-clone"></i>
                    <span>[[[Clone]]]</span>
                </a>
            </li>
            {{/if}}
            {{if @(Convert.ToBoolean(isMasterTenant).ToString().ToLower()) == true && @(Convert.ToBoolean(hidePublish).ToString().ToLower()) == false }}
            {{if @(Convert.ToBoolean(ServerAppConfig.IsSelfHosted).ToString().ToLower()) == true }}
            {{if ~checkTablet() }}
            {{if (CreatedById == @(userId) || @(Convert.ToBoolean(isAdmin).ToString().ToLower()) == true)}}
            {{if !IsMultiDashboard }}
            <li>
                <a href="#" class="option-click" data-action="Publish" data-item-id="{{:Id}}" data-item-name="{{:Name}}" id="tenant-publish-report">
                    <i class="su su-publish"></i>
                    <span>[[[Publish]]]</span>
                </a>
            </li>
            {{/if}}
            {{/if}}
            {{/if}}
            {{/if}}
            {{/if}}
            {{if (CanSchedule || CreatedById == @(userId) || @(Convert.ToBoolean(isAdmin).ToString().ToLower()) == true) && ~checkTablet()}}
            <li role="separator" class="divider"></li>
            {{/if}}
            {{if (CanSchedule || @(Convert.ToBoolean(isAdmin).ToString().ToLower())) && ~checkTablet() && @(Convert.ToBoolean(hideCreateSchedule).ToString().ToLower()) == false }}
            <li>
                <a href="#" data-item-name="{{:Name}}" data-item-id="{{:Id}}" data-category-id="{{:Id}}" data-category-name="{{:CategoryName}}" data-IsMulti-Dashboard="{{:IsMultiDashboard}}" class="option-click" id="create-report-schedule">
                    <i class="su su-nav-schedule"></i>
                    <span>[[[Create Schedule]]]</span>
                </a>
            </li>
            {{/if}}
            {{if ~checkTablet() && @(Convert.ToBoolean(hideVersionHistory).ToString().ToLower()) == false }}
            <li role="separator" class="divider"></li>
            <li>
                <a href="#" class="version" data-item-name="{{:Name}}" data-item-id="{{:Id}}" id="report-version-history">
                    <i class="su su-versions"></i>
                    <span>[[[Version History]]]</span>
                </a>
            </li>
            {{/if}}
            {{if ((CanWrite || CanDelete || @(Convert.ToBoolean(isAdmin).ToString().ToLower())) && ~checkTablet()) && @(Convert.ToBoolean(hideEditBlockSeparator).ToString().ToLower()) == false }}
            <li role="separator" class="divider"></li>
            {{/if}}
            {{if (CanWrite || @(Convert.ToBoolean(isAdmin).ToString().ToLower())) && ~checkTablet() && !IsDraft && @(Convert.ToBoolean(hideEditAsXml).ToString().ToLower()) == false }}
            <li>
                <a class="option-click" title="" data-category-name="{{:CategoryName}}" data-item-name="{{:Name}}" data-item-id="{{:Id}}" id="edit-report-as-xml">
                    <i class="su su-embed"></i>
                    <span>[[[Edit as XML]]]</span>
                </a>
            </li>
            {{/if}}
            {{if (CanWrite || @(Convert.ToBoolean(isAdmin).ToString().ToLower())) && ~checkTablet() && !IsLocked && @(Convert.ToBoolean(hideUpdate).ToString().ToLower()) == false }}
            <li>
                <a href="#" data-item-id="{{:Id}}" id="update-report">
                    <i class="su su-edit"></i>
                    <span>[[[Update]]]</span>
                </a>
            </li>
            {{/if}}
            {{if (CanDelete || @(Convert.ToBoolean(isAdmin).ToString().ToLower())) && ~checkTablet() && @(Convert.ToBoolean(hideDelete).ToString().ToLower()) == false }}
            <li>
                <a href="#" data-item-type="{{:ItemType}}" data-item-id="{{:Id}}" data-item-name="{{:Name}}" class="delete-report">
                    <i class="su su-delete"></i>
                    <span>[[[Delete]]]</span>
                </a>
            </li>
            {{/if}}
            {{if @(Convert.ToBoolean(hideExport).ToString().ToLower()) == false }}
            <li>
                <a class="option-click" data-item-id="{{:Id}}" data-item-name="{{:Name}}" data-category-id="{{:Id}}" data-category-name="{{:CategoryName}}" id="export-report">
                    <i class="su su-upload"></i>
                    <span>[[[Export]]]</span>
                </a>
            </li>
            {{/if}}
            {{else}}
            {{if (CreatedById==@(userId) || @(Convert.ToBoolean(isAdmin).ToString().ToLower()) == true) && ~checkTablet()}}
            {{if @(Convert.ToBoolean(hideInfo).ToString().ToLower()) == false }}
            <li>
                <a href="#" class="openInfo option-click" data-item-name="{{:Name}}" data-description="{{:~renderDoubleQuotes(Description)}}" data-item-id="{{:Id}}" data-createdByDisplayName="{{:CreatedByDisplayName}}" data-createdDate="{{:CreatedDate}}" data-modifiedByFullName="{{:ModifiedByFullName}}" data-modifiedDate="{{:ModifiedDate}}" data-categoryName="{{:CategoryName}}" data-isDraft="{{:IsDraft}}" data-itemType="{{:ItemType}}">
                    <i class="su su-info"></i>
                    <span>[[[Info]]]</span>
                </a>
            </li>
            {{/if}}
            {{if @(Convert.ToBoolean(hideDelete).ToString().ToLower()) == false }}
            <li>
                <a href="#" data-item-type="{{:ItemType}}" data-item-id="{{:Id}}" data-item-name="{{:Name}}" class="delete-report">
                    <i class="su su-delete"></i>
                    <span>[[[Delete]]]</span>
                </a>
            </li>
            {{/if}}
            {{/if}}
            {{/if}}
        </ul>
    </div>
</script>

<script nonce="@Context.Items["ScriptNonce"]">
    $(window).resize(function () {
        var gridObj = $("#items").data("ejGrid");
        var gridName = $('#item-grid-container').attr("data-grid-name")
        if (gridObj != null && dashboardGrid.activeMenu != displayCategory.DraftItems) {
            if (window.innerWidth <= 1040) {
                gridObj.hideColumns("Description");
                gridObj.hideColumns("GridHoverOptions");
            } else {
                gridObj.showColumns("Description");
                gridObj.showColumns("GridHoverOptions");
            }
            if ($("#clear-search").css("display") == "block" || $("#clear-search").css("display") == "inline-block") {
                $("#search-items").css("display", "block");
            }

        }
    });

    $.views.helpers({
        urlEncode: function (category, item) {
            return encodeURI("@Url.Action("Index", "FileRender")/" + category + "/" + item);
        },
        widgetUrlEncode: function (item) {
            return encodeURI("@Url.Action("widgets", "FileRender")/" + item);
        },
        fileUrlEncode: function (item) {
            return encodeURI("@Url.Action("Download", "Files")/" + item + "?compress=true");
        },
        checkMobile: function () {
            return ("@isMobile.ToString().ToLower()" == "false" && (window.innerWidth > 1040));
        },
        checkTablet: function () {
            return window.innerWidth > 900;
        },
        renderDoubleQuotes: function (inputString) {
            return inputString ? inputString.replace(new RegExp("\"", 'g'), '&quot;') : "";
        }
    });

    function initializeGrid() {
        var dataManager = ej.DataManager({
            url: getItemGridUrl,
            adaptor: new ej.UrlAdaptor(),
        });

        dataManager.adaptor.beforeSend = function (dm, request) {
            request.setRequestHeader('X-XSRF-TOKEN', extractXSRFTokenFromCookie());
        };
        $("#items").ejGrid({
            dataSource: dataManager,
            gridLines: ej.Grid.GridLines.Horizontal,
            allowPaging: true,
            pageSettings: { pageSize: defaultReportTakeCountForGrid },
            allowSorting: false,
            allowScrolling: false,
            enableAltRow: false,
            allowSearching: true,
            allowFiltering: false,
            allowSelection: false,
            actionBegin: "fnActionBegin",
            actionComplete: "fnActionComplete",
            rowSelecting: function (args) {
                if (args.target.hasClass("favoriteItem")) {
                    args.cancel = true;
                }
            },
            rowDataBound: function () {
                var itemGridWaitingPopupTemplateId = createLoader("items");
                this.element.ejWaitingPopup({ template: $("#" + itemGridWaitingPopupTemplateId) });
            },
            dataBound: function (args) {
                if (!navigator.userAgent.match(/Windows Phone/i)) { // To avoid tooltips in windows phone.
                    $("[ data-bs-toggle='tooltip']").tooltip();
                }
            },
            enableRowHover: true,
            columns: [
                {
                    template: true,
                    templateID: "#favorite",
                    width: 13,
                    allowFiltering: false,
                    allowSorting: false,
                    visible: (filter.displayCategory != displayCategory.DraftItems && !hideFavorite)
                },
                {
                    headerText: "[[[Name]]]",
                    template: true,
                    headerTemplateID: "#itemnameheader",
                    templateID: "#itemname",
                    field: "Name",
                    width: ("@isMobile.ToString().ToLower()" == "false" && (window.innerWidth > 1200)) ? 100 : 120,
                    type: "string",
                    allowFiltering: true
                },
                {
                    headerText: "[[[Description]]]",
                    width: (window.innerWidth > 1200) ? 55 : 80,
                    template: true,
                    headerTemplateID: "#descriptionheader",
                    field: "Description",
                    templateID: "#description",
                    type: "string",
                    allowFiltering: true,
                    visible: ("@isMobile.ToString().ToLower()" == "false" && (window.innerWidth > 1040) && filter.displayCategory != displayCategory.DraftItems && !hideDescription)
                },
                {
                    headerText: "[[[Category]]]",
                    width: (window.innerWidth > 1200) ? 40 : 50,
                    field: "CategoryName",
                    headerTemplateID: "#categoryheader",
                    visible: (("@isMobile.ToString().ToLower()" == "false") && (window.innerWidth > 1040) && (filter.filterCollection == 0 && filter.displayCategory != displayCategory.DraftItems) && !hideCategoryName),
                    allowFiltering: true,
                    template: true,
                    templateID: "#category",
                    type: "string"
                },
                {
                    headerText: "[[[Owner]]]",
                    width: (window.innerWidth > 1200) ? 40 : 50,
                    headerTemplateID: "#ownerheader",
                    field: "CreatedByDisplayName",
                    visible: ("@isMobile.ToString().ToLower()" == "false" && (window.innerWidth > 1200) && !hideAuthorName),
                    allowFiltering: true,
                    template: true,
                    templateID: "#createdbydisplayname",
                    type: "string"
                },
                {
                    width: 45,
                    visible: ("@isMobile.ToString().ToLower()" == "false" && (window.innerWidth > 1200)),
                    template: true,
                    field: "GridHoverOptions",
                    headerText: '',
                    templateID: "#gridhoveroptions",
                    allowFiltering: false
                },
                {
                    template: true,
                    templateID: "#options",
                    width: (window.innerWidth > 1200 && filter.displayCategory != displayCategory.DraftItems) ? 15 : (filter.displayCategory == displayCategory.DraftItems) ? 8 : 25,
                    allowFiltering: false,
                    allowSorting: false
                }
            ]
        });
    }

    function fnActionBegin(args) {
        this.model.query._params.push({ key: "searchKey", value: filter.searchKey });

        if (filter.filterCollection != undefined && filter.filterCollection.length > 0) {
            this.model.query._params.push({ key: "filterCollection", value: filter.filterCollection });
        }

        if (filter.sorted != undefined && filter.sorted.length > 0) {
            args.model.query._params.push({ key: "sorted", value: filter.sorted });
        }

        if (filter.displayCategory != 0) {
            args.model.query._params.push({
                key: "displayCategory",
                value: filter.displayCategory
            });
        }

        if (args.requestType == "refresh" && !this.initialRender) {
            $("#items").find(".e-gridcontent").css("visibility", "hidden");
        }
    }

    function fnActionComplete(args) {
        $("#item-list-panel > .item-navigation, #item-list-panel > #category-listing").css("visibility", "visible");
        $("[ data-bs-toggle='tooltip']").tooltip();
        var gridObj = $("#items").data("ejGrid");
        dashboardGrid.totalDashboardCount = gridObj._gridRecordsCount;
        dashboardGrid.doDashboardComplete();
        if (gridObj._gridRecordsCount == 0) {
            this.getContentTable().find("tbody .emptyrecord").html(window.Server.App.LocalizationContent.NoDashboards);
            dashboardGrid.dashboardDataBindComplete = false;
        }
        var gridName = $('#item-grid-container').attr("data-grid-name");
        var publicDashboard = $("ul.item-navigation li.public-items").hasClass("active");
        var isMarkItemsPublic = $("#isMarkItemspublic").val();
        if (gridName.toLowerCase() == "dashboards" || gridName.toLowerCase() == "reports") {
            if (publicDashboard == true && gridObj._gridRecordsCount > 0 && isMarkItemsPublic == "False") {
                $(".tool-tip").show();
            }
            else {
                $(".tool-tip").hide();
            }
        }

        if (args.requestType == "refresh" && !this.initialRender) {
            $("#items").find(".e-gridcontent").css("visibility", "visible");
        }
    }

    function setGrid(filters) {
        var reportGrid = $("#items").data("ejGrid");
        dashboardGrid = angular.element('[ng-controller=DashboardCtrl]').scope();
        filter = filters;
        if (reportGrid != undefined)
            reportGrid.destroy();
        initializeGrid();
    };
    $(document).on("show.bs.tooltip", function () {
        $(".tooltip").not(this).hide();
    });
</script>
