@inject ServerPrincipal _identityResponse
@{
    var gridName = ViewBag.gridName;
    var permissionData = ViewBag.Permissions;
    var userId = _identityResponse.User.UserId;
    var globalAppSettings = _globalAppSettings;
    var isAdmin = _identityResponse.IsAdmin;
    var isMobile = new DeviceDetection(Context).IsMobile;
    var query = ViewBag.SearchQuery;
    var granularPermissions = ViewBag.GranularPermissions as Dictionary<object, bool>;
    var reportUrl = Url.Action("Reports", "Reports");
    var downloadUrl = reportUrl.TrimEnd('/').Remove(reportUrl.LastIndexOf('/'));
    var downloadDatasetUrl = downloadUrl + "/items/download";
    var isHideIconBasedOnDnsName = GlobalAppSettings.IsUrlInDnsList(globalAppSettings.DisplayUri);
    var customUI = globalAppSettings.SystemSettings.CustomUI;
    var profile = customUI?.Profiles?.FirstOrDefault();
    var datasourceSchemes = profile?.DataSources?.Scheme != null ? customUI?.Schemes?.FirstOrDefault(x => x.Name == profile.DataSources.Scheme) : null;
    var datasetSchemes = profile?.Dataset?.Scheme != null ? customUI?.Schemes?.FirstOrDefault(x => x.Name == profile.Dataset.Scheme) : null;
    var showDatasourceShare = datasourceSchemes?.Share ?? true;
    var showDatasourceInfo = datasourceSchemes?.Info ?? true;
    var showDatasourceEditAsXml = datasourceSchemes?.EditAsXml ?? true;
    var showDatasourceUpdate = datasourceSchemes?.Update ?? true;
    var showDatasourceDelete = datasourceSchemes?.Delete ?? true;
    var showDatasourceContextMenu = (datasourceSchemes?.ContextMenu ?? true) && (showDatasourceShare || showDatasourceInfo || showDatasourceEditAsXml || showDatasourceUpdate || showDatasourceDelete);
    var showDatasetCreateReport = datasetSchemes?.CreateReport ?? true;
    var showDatasetCreateReportPart = datasetSchemes?.CreateReportPart ?? true;
    var showDatasetDownload = datasetSchemes?.Download ?? true;
    var showDatasetEdit = datasetSchemes?.Edit ?? true;
    var showDatasetChangeDatasource = datasetSchemes?.ChangeDatasource ?? true;
    var showDatasetShare = datasetSchemes?.Share ?? true;
    var showDatasetVersionHistory = datasetSchemes?.VersionHistory ?? true;
    var showDatasetInfo = datasetSchemes?.Info ?? true;
    var showDatasetEditAsXml = datasetSchemes?.EditAsXml ?? true;
    var showDatasetUpdate = datasetSchemes?.Update ?? true;
    var showDatasetDelete = datasetSchemes?.Delete ?? true;
    var showDatasetContextMenu = (datasetSchemes?.ContextMenu ?? true) && (showDatasetCreateReport || showDatasetCreateReportPart || showDatasetDownload || showDatasetEdit || showDatasetChangeDatasource || showDatasetShare || showDatasetVersionHistory || showDatasetInfo || showDatasetEditAsXml || showDatasetUpdate || showDatasetDelete);
}
<script nonce="@Context.Items["ScriptNonce"]">
    var copyIframeUrl = "@Url.Action("copyviewitem", "items")";
    var moveIframeUrl = "@Url.Action("moveviewitem", "items")";
    var versionIframeUrl = "@Url.Action("itemversion", "items")";
    var deleteConfirmationUrl = "@Url.Action("deleteconfirmation", "items")";
    var deleteItemUrl = "@Url.Action("deleteitem", "items")";
    var editFilePopupUrl = "@Url.Action("getfiledetails", "files")";
    var makePublicUrl = "@Url.Action("makeitempublic", "items")";
    var removePublicUrl = "@Url.Action("RemovePublic", "items")";
    var designerUrl = "@Url.Action(globalAppSettings.SystemSettings.InstallationFolder+ "dashboarddesigner.exe", "dashboarddesigner")";
    var favoriteItemUrl = "@Url.Action("MakeFavorite", "items")";
    var permissionIframeUrl = "@Url.Action("ItemPermissionView", "items")";
    var addWidgetUrl = "@Url.Action("addwidget", "widgets")";
    var dashboardDesignerUrl = "@Url.Action("ReportDesigner", "Designer")";
    var checkDashboardCreationLimit = "@Url.Action("CheckDashboardCreationLimit", "Designer")";
    var getDatasetDetailsUrl = "@Url.Action("EditDatasetView", "Datasets")";
    var editDatasourceUrl = "@Url.Action("EditDatasourceView", "DataSources")";
    var changeDataSourceUrl = "@Url.Action("ChangeDataSource", "items")";
    var i_am_ie9 = false;
    var itemGridPageNonce = "@Context.Items["ScriptNonce"]";
    var reportPartEditUrl = "@Url.Action("ReportPart", "Designer")";
    let getReportsLinkedWithItemUrl = "@Url.Action("GetReportsLinkedWithItem", "Items")";
    var viewDashboardUrlAction = "@Url.Action("Reports", "Reports")";
    var getLinkDialogViewUrl = "@Url.Action("GetLinkView", "items")";
    var itemsGrid;
    var datasourceSchemesDetails = @Html.Raw(Json.Serialize(datasourceSchemes));
    var datasetSchemesDetails = @Html.Raw(Json.Serialize(datasetSchemes));
</script>
<!--[if LT IE  10]>
        <script nonce="@Context.Items["ScriptNonce"]">
            i_am_ie9 = true;
        </script>
    <![endif]-->

<div id="items">
</div>

<script nonce="@Context.Items["ScriptNonce"]" type="text/x-jsrender" id="itemnameheader">
    <div class="item-name">[[[Name]]]</div>
</script>
<script nonce="@Context.Items["ScriptNonce"]" type="text/x-jsrender" id="descriptionheader">
    <div class="item-header">[[[Description]]]</div>
</script>
<script nonce="@Context.Items["ScriptNonce"]" type="text/x-jsrender" id="categoryheader">
    <div class="item-header">[[[Category]]]</div>
</script>
<script nonce="@Context.Items["ScriptNonce"]" type="text/x-jsrender" id="ownerheader">
    <div class="item-header">[[[Owner]]]</div>
</script>
<script nonce="@Context.Items["ScriptNonce"]" type="text/x-jsrender" id="last-modified-header">
    <div class="item-header">[[[Last Modified]]]</div>
</script>
<script nonce="@Context.Items["ScriptNonce"]" type="text/x-jsrender" id="data-rows-header">
    <div class="item-header">[[[Data Rows]]]</div>
</script>
@*<script nonce="@Context.Items["ScriptNonce"]" type="text/x-jsrender" id="data-status-header">
        <div class="item-header">[[[Data Refresh Status]]]</div>
    </script>*@
<script nonce="@Context.Items["ScriptNonce"]" type="text/x-jsrender" id="description">
    <div class="item-description grid-content" title="{{:~renderDoubleQuotes(Description)}}" data-bs-toggle="tooltip" data-bs-placement="top">
        <span>
            {{>Description}}
        </span>
    </div>
</script>

<script nonce="@Context.Items["ScriptNonce"]" type="text/x-jsrender" id="category">
    <span title="{{:CategoryName}}" data-bs-toggle="tooltip" data-bs-placement="top">
        {{>CategoryName}}
    </span>
</script>

<script nonce="@Context.Items["ScriptNonce"]" type="text/x-jsrender" id="createdbydisplayname">
    <span title="{{:CreatedByDisplayName}}" data-bs-toggle="tooltip" data-bs-placement="top">
        {{>CreatedByDisplayName}}
    </span>
</script>

<script nonce="@Context.Items["ScriptNonce"]" type="text/x-jsrender" id="modifieddate">
    <div title="{{:ModifiedDate}}" data-bs-toggle="tooltip" data-bs-placement="top">
        {{>ModifiedDate}}
    </div>
</script>


<script nonce="@Context.Items["ScriptNonce"]" type="text/x-jsrender" id="itemname">
    {{if ItemType=="2"}}
    <div class="item-name no-left-margin grid-content" title="{{:Name}}" data-bs-toggle="tooltip" data-bs-placement="top">
        {{if ItemType=="2"}}
        <span><a href="{{:~urlEncode(CategoryName, Name)}}" target="_blank">{{>Name}}</a></span>
        {{else ItemType=="8"}}
        <span><a href="{{:~widgetUrlEncode(Name)}}" target="_blank">{{>Name}}</a></span>
        {{else ItemType=="1"}}
        <span><a href="@Url.Action("Reports", "Reports" )?category={{:Name}}" target="_blank">{{>Name}}</a></span>
        @*{{else ItemType=="@((int)ItemType.File)"}}
            <span><a href="@UrlHelper.GenerateUrl(" ItemDownload", "Download" , "FileRender" , null, RouteTable.Routes, HttpContext.Current.Request.RequestContext, false)/{{:ItemTypeString}}/{{:Name}}" target="_blank">{{>Name}}</a></span>*@
        {{else}}
        <span>{{>Name}}</span>
        {{/if}}
    </div>
    {{else}}
    <div class="item-name grid-content" title="{{:Name}}" data-bs-toggle="tooltip" data-bs-placement="top">
        {{if ItemType=="2"}}
        <span><a href="{{:~urlEncode(CategoryName, Name)}}" target="_blank">{{>Name}}</a></span>
        {{else ItemType=="8"}}
        <span><a href="{{:~widgetUrlEncode(Name)}}" target="_blank">{{>Name}}</a></span>
        {{else ItemType=="1"}}
        <span><a href="@Url.Action(" Reports", "Reports" )?category={{:Name}}" target="_blank">{{>Name}}</a></span>
        @*{{else ItemType=="@((int)ItemType.File)"}}
            <span><a href="@UrlHelper.GenerateUrl(" ItemDownload", "Download" , "FileRender" , null, RouteTable.Routes, HttpContext.Current.Request.RequestContext, false)/{{:ItemTypeString}}/{{:Name}}" target="_blank">{{>Name}}</a></span>*@
        {{else}}
        <span>{{>Name}}</span>
        {{/if}}
    </div>
    {{/if}}
</script>

<script nonce="@Context.Items["ScriptNonce"]" type="text/x-jsrender" id="options">
    <div class="dropdown">
        {{if ItemType != "@((int)ItemType.Datasource)" || (@(Convert.ToBoolean(showDatasourceContextMenu).ToString().ToLower()) == true)}}
        {{if ItemType != "@((int)ItemType.Dataset)" || (@(Convert.ToBoolean(showDatasetContextMenu).ToString().ToLower()) == true)}}
        <span class="dropdown-toggle option-icon" title="[[[Actions]]]" data-bs-toggle="dropdown">
            <i class="su su-options"></i>
        </span>
        {{/if}}
        {{/if}}
        <ul class="dropdown-menu" role="menu">
        {{if CanDownload}}
        {{if ~checkMobile()}}
        {{if ItemType=="@((int)ItemType.File)"}}
        <li>
            <a href="#" title="" ispublic="{{:IsPublic}}" data-itemtype="{{:ItemType}}" data-item-id="{{:Id}}" data-item-type="@(gridName)" data-name="{{:Name}}" class="get-link option-click prevent-default-action" data-url="{{:~fileUrlEncode(Id)}}">
                <i class="su su-link"></i>
                <span>[[[Get Link]]]</span>
            </a>
        </li>
        {{/if}}
        {{/if}}

        {{if ItemType=="@((int)ItemType.File)"}}
        <li>
            @*<a href="@UrlHelper.GenerateUrl(" ItemDownload", "Download" , "FileRender" , null, RouteTable.Routes, HttpContext.Current.Request.RequestContext, false)/{{:ItemTypeString}}/{{:Name}}" title="">
            <i class="su su-download"></i>
            <span>[[[Download Report]]]</span>
            </a>
            {{else ItemType=="@((int)ItemType.Report)" }}
            <a href="@UrlHelper.GenerateUrl(" DashboardDownload", "Download" , "FileRender" , null, RouteTable.Routes, HttpContext.Current.Request.RequestContext, false)/{{:CategoryName}}/{{:Name}}" title="">
            <i class="su su-download"></i>
            <span>[[[Download Dashboard]]]</span>
            </a>
            {{else}}*@
            @*<a href="@UrlHelper.GenerateUrl(" ItemDownload", "Download" , "FileRender" , null, RouteTable.Routes, HttpContext.Current.Request.RequestContext, false)/{{:ItemTypeString}}/{{:Name}}" title="">
            <i class="su su-download"></i>
            <span>[[[Download]]]</span>
            </a>*@
        </li>
        {{/if}}
        {{/if}}

        {{if ~checkMobile()}}
        {{if (@(permissionData[ItemType.Report].ToString().ToLower()) == true && ItemType == "@((int)ItemType.Dataset)")}}
        {{if @(Convert.ToBoolean(showDatasetCreateReport).ToString().ToLower()) == true }}
        <li>
            <a href="@Url.Action("ReportDesigner","Designer")?datasetId={{:Id}}" target="_blank" class="create-dashboard-using-datasource" title="[[[Create report using this Dataset]]]" data-itemname="{{:Name}}" data-item-id="{{:Id}}">
                <i class="su su-nav-report"></i>
                <span>[[[Create Report]]]</span>
            </a>
        </li>
        <li role="separator" class="divider"></li>
        {{/if}}
        {{if @(Convert.ToBoolean(showDatasetCreateReportPart).ToString().ToLower()) == true }}
        <li>
            <a href="@Url.Action("ReportPart","Designer")?datasetId={{:Id}}" target="_blank" class="create-report-part-using-dataset" title="[[[Create report part using this Dataset]]]" data-itemname="{{:Name}}" data-item-id="{{:Id}}">
                <i class="su su-report-part"></i>
                <span>[[[Create Report Part]]]</span>
            </a>
        </li>
        <li role="separator" class="divider"></li>
        {{/if}}
        {{/if}}
        {{/if}}

        {{if CanDownload}}
        {{if ~checkMobile()}}
        {{if ItemType == "@((int)ItemType.Dataset)"}}
        {{if (@(Convert.ToBoolean(showDatasetDownload).ToString().ToLower()) == true)}}
        <li>
            <a href="@downloadDatasetUrl/{{:ItemType}}/{{:Id}}/{{:Name}}" id="download-dataset">
                <i class="su su-download"></i>
                <span>[[[Download Dataset]]]</span>
            </a>
        </li>
        {{/if}}
        {{/if}}
        {{/if}}
        {{/if}}

        {{if CanWrite}}
        {{if ~checkMobile()}}
        {{if ItemType == "@((int)ItemType.Dataset)"}}
        {{if (@(Convert.ToBoolean(showDatasetEdit).ToString().ToLower()) == true)}}
        <li>
            <a href="@Url.Action("DatasetDesigner","Reports")/{{:Name}}" title="" target="_blank">
                <i class="su su-edit"></i>
                <span>[[[Edit Dataset]]]</span>
            </a>
        </li>
        <li role="separator" class="divider"></li>
        {{/if}}
        {{/if}}
        {{/if}}
        {{/if}}

        {{if CanWrite}}
        {{if ~checkMobile()}}
        {{if !IsDraft}}
        {{if ItemType == "@((int)ItemType.Datasource)" && DatasourceType =="@((int)ConnectionMode.Extract)"}}
        <li>
            <a href="#" title="" class="refresh-history prevent-default-action" data-itemname="{{:Name}}" data-item-id="{{:Id}}" data-itemtype="{{:ItemType}}">
                <i class="su su-refresh-history"></i>
                <span>[[[Refresh History]]]</span>
            </a>
        </li>
        <li role="separator" class="divider"></li>
        {{/if}}
        {{/if}}
        {{/if}}
        {{/if}}

        {{if !IsLocked}}
        {{if ~checkMobile()}}
        {{if (@(permissionData[ItemType.Dataset].ToString().ToLower()) == true && ItemType == "@((int)ItemType.Dataset)")}}
        {{if (@(Convert.ToBoolean(showDatasetChangeDatasource).ToString().ToLower()) == true)}}
        <li>
            <a href="#" title="" class="change-datasource prevent-default-action" data-itemname="{{:Name}}" data-item-id="{{:Id}}" data-action="ChangeDataSource">
                <i class="su su-copy"></i>
                <span>[[[Change Data source]]]</span>
            </a>
        </li>
        <li role="separator" class="divider"></li>
        {{/if}}
        {{/if}}
        {{/if}}
        {{/if}}

        {{if ~checkMobile()}}
        {{if @(Convert.ToBoolean(isHideIconBasedOnDnsName).ToString().ToLower()) == false }}
        {{if CreatedById==@(userId) || @(isAdmin)== true  || (@(granularPermissions[ItemType.Datasource].ToString().ToLower()) == true && ItemType == "@((int)ItemType.Datasource)") || (@(granularPermissions[ItemType.Dataset].ToString().ToLower()) == true && ItemType == "@((int)ItemType.Dataset)")}}
        {{if ItemType=="@((int)ItemType.File)"}}
        <li role="separator" class="divider"></li>
        {{/if}}
        {{if ItemType != "@((int)ItemType.Datasource)" || (@(Convert.ToBoolean(showDatasourceShare).ToString().ToLower()) == true)}}
        {{if ItemType != "@((int)ItemType.Dataset)" || (@(Convert.ToBoolean(showDatasetShare).ToString().ToLower()) == true)}}
        <li>
            <a href="#" class="item-permissions prevent-default-action" title="" data-itemname="{{:Name}}" data-item-id="{{:Id}}">
                <i class="su su-manage-permission"></i>
                <span>[[[Sharing Permissions]]]</span>
            </a>
        </li>
         {{if ItemType == "@((int)ItemType.Dataset)" || ItemType == "@((int)ItemType.Datasource)"}}
            <li role="separator" class="divider"></li>
        {{/if}}
        {{/if}}
        {{/if}}
        {{/if}}        
        {{/if}}
        {{/if}}

        {{if (~checkMobile() && ItemType!="@((int)ItemType.Datasource)")}}
        {{if (@(Convert.ToBoolean(showDatasetVersionHistory).ToString().ToLower()) == true)}}
        <li>
            <a href="#" class="version-button prevent-default-action" title="" data-itemname="{{:Name}}" data-item-id="{{:Id}}">
                <i class="su su-versions"></i>
                <span>[[[Version History]]]</span>
            </a>
        </li>
        {{/if}}
        {{/if}}

        {{if ~checkMobile()}}
        {{if ItemType == "@((int)ItemType.Dataset)" || ItemType == "@((int)ItemType.Datasource)"}}
        {{if ItemType == "@((int)ItemType.Dataset)"}}
             <li role="separator" class="divider"></li>
        {{/if}}
        {{if ItemType != "@((int)ItemType.Datasource)" || (@(Convert.ToBoolean(showDatasourceInfo).ToString().ToLower()) == true)}}
        {{if ItemType != "@((int)ItemType.Dataset)" || (@(Convert.ToBoolean(showDatasetInfo).ToString().ToLower()) == true)}}
        <li>
            <a href="#" class="open-info option-click" data-item-name="{{:Name}}" data-description="{{:~renderDoubleQuotes(Description)}}" data-item-id="{{:Id}}" data-createdByDisplayName="{{:CreatedByDisplayName}}" data-createdDate="{{:CreatedDate}}" data-modifiedByFullName="{{:ModifiedByFullName}}" data-modifiedDate="{{:ModifiedDate}}" data-categoryName="{{:CategoryName}}" data-isDraft="{{:IsDraft}}" data-itemType="{{:ItemType}}" id="item-info-option">
                <i class="su su-info"></i>
                <span>[[[Info]]]</span>
            </a>
        </li>
        {{/if}}
        {{/if}}
        {{/if}}
        {{/if}}

        {{if CanWrite}}
        {{if ~checkMobile()}}
        {{if ItemType == "@((int)ItemType.Dataset)"}}
        {{if (@(Convert.ToBoolean(showDatasetEditAsXml).ToString().ToLower()) == true)}}
        <li role="separator" class="divider"></li>
        <li>
            <a href="@Url.Action("EditDataSetAsXML","Reports")/{{:Name}}" title="" target="_blank">
                <i class="su su-embed"></i>
                <span>[[[Edit as XML]]]</span>
            </a>
        </li>
        {{/if}}
        {{/if}}
        {{/if}}
        {{/if}}
        
        {{if ~checkMobile()}}
        {{if CanWrite || CanDelete || ItemType=="@((int)ItemType.Report)"}}
        {{/if}}
        {{/if}}
        {{if CanWrite}}
        {{if ~checkMobile()}}
        {{if ItemType=="@((int)ItemType.Report)"}}
        <li role="separator" class="divider"></li>
        <li>
            <a href="#" title="" class="item-edit prevent-default-action" data-item-id="{{:Id}}">
                <i class="su su-edit"></i>
                <span>[[[Update Report]]]</span>
            </a>
        </li>
        @*{{else}}
        <li>
            <a href="#" title="" class="item-edit" data-item-id="{{:Id}}">
                <i class="su su-edit"></i>
                <span>[[[Update]]]</span>
            </a>
        </li>*@
        {{/if}}
        {{/if}}
        {{/if}}
        @*{{if CanWrite}}
        {{if ~checkMobile()}}
        {{if ItemType=="@((int)ItemType.Report)"}}
        <li>
            <a href="#" title="" class="update-datasource" data-item-id="{{:Id}}">
                <i class="su su-datasource"></i>
                <span>[[[Update Data Source(s)]]]</span>
            </a>
        </li>
        {{/if}}
        {{/if}}
        {{/if}}*@

        {{if !IsLocked}}
        {{if ~checkMobile()}}
        {{if CanWrite}}
        {{if ItemType=="@((int)ItemType.Datasource)"}}
        {{if (@(Convert.ToBoolean(showDatasourceEditAsXml).ToString().ToLower()) == true)}}
        <li>
            <a href="@Url.Action("EditDataSourceAsXML","DataSources")/{{:Name}}" title="" target="_blank">
                <i class="su su-embed"></i>
                <span>[[[Edit as XML]]]</span>
            </a>
        </li>
        {{/if}}
        {{/if}}
        {{/if}}
        {{/if}}
        {{/if}}

        {{if !IsLocked}}
        {{if (~checkMobile() && CanWrite && ItemType!="@((int)ItemType.Datasource)")}}
        {{if (@(Convert.ToBoolean(showDatasetUpdate).ToString().ToLower()) == true)}}
        <li role="separator" class="divider"></li>
        <li>
            <a href="#" title="" class="item-edit prevent-default-action" data-item-id="{{:Id}}">
                <i class="su su-edit"></i>
                <span>[[[Update]]]</span>
            </a>
        </li>
        {{/if}}
        {{/if}}
        {{/if}}
        {{if !IsLocked}}
        {{if ~checkMobile()}}
        {{if CanWrite}}
        {{if ItemType=="@((int)ItemType.Datasource)"}}
        {{if (@(Convert.ToBoolean(showDatasourceUpdate).ToString().ToLower()) == true)}}
        <li>
            <a href="#" title="" class="item-edit-datasource prevent-default-action" data-item-id="{{:Id}}">
                <i class="su su-edit"></i>
                <span>[[[Update]]]</span>
            </a>
        </li>
        {{/if}}
        {{/if}}
        {{/if}}
        {{/if}}
        {{/if}}
        {{if ~checkMobile()}}
        {{if CanDelete}}
        {{if ItemType == "@((int)ItemType.Dataset)"}}
        {{if (@(Convert.ToBoolean(showDatasetDelete).ToString().ToLower()) == true)}}
                 <li role="separator" class="divider"></li>
        {{/if}}
        {{/if}}
        {{if (@(Convert.ToBoolean(showDatasourceDelete).ToString().ToLower()) == true || @(Convert.ToBoolean(showDatasetDelete).ToString().ToLower()) == true)}}
        <li>
            {{if ItemType=="@((int)ItemType.Datasource)"}}
            {{if (@(Convert.ToBoolean(showDatasourceDelete).ToString().ToLower()) == true)}}
            <a href="#" title="" class="item-delete prevent-default-action" data-itemtype="{{:ItemType}}" data-item-id="{{:Id}}" data-name="{{:Name}}" data-datasource-type="{{:DatasourceType}}">
                <i class="su su-delete"></i>
                <span>[[[Delete]]]</span>
            </a>
            {{/if}}
            {{else}}
            {{if (@(Convert.ToBoolean(showDatasetDelete).ToString().ToLower()) == true)}}
            <a href="#" title="" class="item-delete prevent-default-action" data-itemtype="{{:ItemType}}" data-item-id="{{:Id}}" data-name="{{:Name}}">
                <i class="su su-delete"></i>
                <span>[[[Delete]]]</span>
            </a>
            {{/if}}
            {{/if}}
        </li>
        {{/if}}
        {{/if}}
        {{/if}}
    </ul>
    </div>
</script>

<script nonce="@Context.Items["ScriptNonce"]" type="text/x-jsrender" id="data-rows">
    {{if DatasourceType=="@((int)ConnectionMode.Extract)"}}
    <span title="{{:RowCount}}" data-bs-toggle="tooltip" data-bs-placement="top">
        {{:RowCount}}
    </span>
    {{else}}
    <span>&#45;</span>
    {{/if}}
</script>

@*<script nonce="@Context.Items["ScriptNonce"]" type="text/x-jsrender" id="data-status">
        {{if DatasourceType=="@((int)ConnectionMode.Extract)"}}
        <div>
            {{if ScheduleStatus=="@((int)ScheduleStatus.Success)"}}
            <div>
                <span data-bs-toggle="tooltip" data-bs-placement="top" title="[[[Successful at]]] {{:LastAttemptAt}}">
                    [[[Successful at]]] {{:LastAttemptAt}}
                </span>
            </div>
            {{else ScheduleStatus=="@((int)ScheduleStatus.Fail)"}}
            <div>
                <span data-bs-toggle="tooltip" data-bs-placement="top" title="[[[Failure at]]] {{:LastAttemptAt}}">
                    [[[Failure at]]] {{:LastAttemptAt}}
                </span>
                {{if LastSuccessfulAttemptAt != null}}
                <div>
                    <span data-bs-toggle="tooltip" data-bs-placement="top" title="[[[Last successful at]]] {{:LastSuccessfulAttemptAt}}">
                        [[[Last successful at]]] {{:LastSuccessfulAttemptAt}}
                    </span>
                </div>
                {{else}}
                <div>
                    <span data-bs-toggle="tooltip" data-bs-placement="top" title="[[[No successful refreshes]]]">
                        [[[No successful refreshes]]]
                    </span>
                </div>
                {{/if}}
            </div>
            {{else}}
            <div>
                <span data-bs-toggle="tooltip" data-bs-placement="top" title="[[[Not refreshed yet]]]">
                    [[[Not refreshed yet]]]
                </span>
            </div>
            {{/if}}
        </div>
        {{else}}
        <div>
            <span class="label label-success live-connection">[[[Live Connection]]]</span>
        </div>
        {{/if}}
    </script>*@
<div id="ItemAction" title="[[[Item Actions]]]" class="no-padding"></div>
<div><iframe id="hiddeniframe" src="" style="display:none"></iframe></div>
<input type="hidden" id="applauncherinputhidden" style="width:0;margin:0;border:0;height:0; display:inherit" />

<script nonce="@Context.Items["ScriptNonce"]" type="text/javascript" language="javascript">
    var gridName = $('#item-grid-container').attr("data-grid-name");
    var toolbarItems = [{ templateID: "#openTemplate" }, { templateID: "#openwithdashboarddesignerTemplate" }, { templateID: "#DownloadTemplate" }, { templateID: "#Separator1" }, { templateID: "#can-edit-template" }, { templateID: "#can-delete-template" }, { templateID: "#separator2" }, { templateID: "#move-template" }, { templateID: "#copy-template" }, { templateID: "#clone-template" }, { templateID: "#separator3" }, { templateID: "#schedule-template" }, { templateID: "#Separator4" }, { templateID: "#VersionTemplate" }];
    var categoryName = decodeHtmlAsString("@Context.Request.Query["categoryName"]".toString());
    var filters = { filterType: "menu" };
    if (gridName == "dashboards" && categoryName != "") {
        var filters = { filterType: "menu", "filteredColumns": [{ field: "CategoryName", operator: "equal", value: categoryName }] };
    }

    if ("@query" != "") {
        var gridObj = $("#items").data("ejGrid");
        var filters = { filterType: "menu", "filteredColumns": [{ field: "Name", operator: "equal", value: "@query" }] };
    }

    $(document).ready(function () {
        GridLocalization();
        ej.support.enableLocalizedSort = true;
        $("#items").ejGrid({
            dataSource: ej.DataManager({ url: "@Url.Action("GetItems", (string)gridName)", adaptor: "UrlAdaptor" }),
            gridLines: ej.Grid.GridLines.None,
            allowPaging: true,
            pageSettings: { pageSize: 20 },
            allowSorting: true,
            enableAltRow: false,
            allowSearching: true,
            allowFiltering: true,
            allowSelection: true,
            filterSettings: filters,
            actionBegin: "fnActionBegin",
            actionComplete: "fnActionComplete",
            rowSelecting: function (args) {
                if (args.target.hasClass("favoriteItem")) {
                    args.cancel = true;
                }
            },
            rowDataBound: function () {
                var height = $(".e-gridcontent").height();
                if (height != null) {
                    rowBound();
                }
            },
            dataBound: function (args) {
                if (location.pathname.toLowerCase() === "/" || location.pathname.split("/")[location.pathname.split("/").length - 1].toLowerCase() == "dashboards") {
                    refreshScroller();
                }
                $('[data-bs-toggle="tooltip"]').tooltip();
            },
            enableRowHover: true,
            columns: [
                {
                    headerText: "[[[Name]]]",
                    template: true,
                    headerTemplateID: "#itemnameheader",
                    templateID: "#itemname",
                    field: "Name",
                    cssClass: gridName == "dashboards" ? "align-name" : "",
                    width: ("@isMobile.ToString().ToLower()" == "false" && (window.innerWidth > 1200)) ? 55 : 80,
                    type: "string",
                    allowFiltering: true
                },
                {
                    headerText: "[[[Description]]]",
                    width: (gridName == "datasources" || gridName == "datasets")  ? 70 : 120,
                    template: true,
                    headerTemplateID: "#descriptionheader",
                    field: "Description",
                    templateID: "#description",
                    type: "string",
                    allowFiltering: true,
                    visible: ("@isMobile.ToString().ToLower()" == "false" && (window.innerWidth > 1040))
                },
                {
                    headerText: "[[[Category]]]",
                    width: 70,
                    field: "CategoryName",
                    headerTemplateID: "#categoryheader",
                    visible: (("@isMobile.ToString().ToLower()" == "false") && (window.innerWidth > 1040) && (gridName == "dashboards")),
                    allowFiltering: true,
                    template: true,
                    templateID: "#category",
                    type: "string"
                },
                {
                    headerText: "[[[Owner]]]",
                    width: (window.innerWidth > 1200) ? 70 : 50,
                    headerTemplateID: "#ownerheader",
                    field: "CreatedByDisplayName",
                    visible: ("@isMobile.ToString().ToLower()" == "false" && (window.innerWidth > 1200)),
                    allowFiltering: true,
                    template: true,
                    templateID: "#createdbydisplayname",
                    type: "string"
                },
                {
                    headerText: "[[[Last Modified]]]",
                    width: (gridName == "datasources" || gridName == "datasets") ? 50 : 70,
                    field: "ModifiedDate",
                    visible: ("@isMobile.ToString().ToLower()" == "false" && (window.innerWidth > 1200)),
                    template: true,
                    headerTemplateID: "#lastmodifiedheader",
                    templateID: "#modifieddate",
                    allowFiltering: false
                },
                @*{
                    headerText: "[[[Data Refresh Status]]]",
                    width: 70,
                    field: "ModifiedDate",
                    visible: ("@isMobile.ToString().ToLower()" == "false" && (window.innerWidth > 1200) && (gridName == "datasources")),
                    template: true,
                    headerTemplateID: "#data-status-header",
                    templateID: "#data-status",
                    allowFiltering: false
                },*@
                {
                    template: true,
                    templateID: "#options",
                    width: (window.innerWidth > 1200) ? 15 : 25,
                    allowFiltering: false,
                    allowSorting: false
                }
            ]
        });

        $.views.helpers({
            urlEncode: function (category, item) {
                return encodeURI("@Url.Action("Index", "FileRender")/" + category + "/" + item);
            },
            widgetUrlEncode: function (item) {
                return encodeURI("@Url.Action("widgets", "FileRender")/" + item);
            },
            fileUrlEncode: function (item) {
                return encodeURI("@Url.Action("Download", "Files")/" + item + "?compress=true");
            },
            checkMobile: function () {
                return ("@isMobile.ToString().ToLower()" == "false" && (window.innerWidth > 1040));
            },
            checkTablet: function () {
                return window.innerWidth > 900;
            },
            renderDoubleQuotes: function (inputString) {
                return inputString.replace(new RegExp("\"", 'g'), '&quot;');
            }
        });

        $(document).on("click", ".prevent-default-action", function (e) {
            e.preventDefault();
    });
    });
</script>
