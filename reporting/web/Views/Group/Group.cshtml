@using System.Runtime.InteropServices;
@using Syncfusion.Server.Base.Helpers

@{
    var globalAppSettings = _globalAppSettings;

    ViewBag.Title = "[[[Groups]]] - " + globalAppSettings.SystemSettings.OrganizationName;
    ViewBag.HelpSiteUrl = GlobalAppSettings.GetHelpSiteUrl(HelpSiteUrlNames.ManageGroups);
    var isAzureApplication = ServerAppConfig.IsAzureApplication;
    var enableWindowsAD = RuntimeInformation.IsOSPlatform(OSPlatform.Windows);
    var reportServerResourceUrl = globalAppSettings.SystemSettings.CDNLink.TrimEnd('/');
    var granularPermissions = ViewBag.GranularPermissions as Dictionary<object, bool>;
    var isAdmin = _identityResponse.IsAdmin;
    var customUI = _globalAppSettings.SystemSettings.CustomUI;
    var groupImport = new GroupImport();
    if (customUI?.Profiles != null)
    {
        groupImport = customUI?.Profiles[0]?.GroupImport != null ? customUI?.Profiles[0]?.GroupImport[0] : new GroupImport();
    }
}

@section scripts{
    <script nonce="@Context.Items["ScriptNonce"]">
        var checkGroupnameUrl = "@Url.Action("CheckGroupname", "Group")";
        var addGroupUrl = "@Url.Action("AddGroup", "Group")";
        var deleteGroupViewUrl = "@Url.Action("DeleteGroupView", "Group")";
        var addGroupViewUrl = "@Url.Action("AddGroupView", "Group")";
        var deleteGroupUrl = "@Url.Action("DeleteGroup", "Group")";
        var groupPageUrl = "@Url.Action("Group", "Group")";
        var deleteFromGroupListUrl = "@Url.Action("DeleteFromGroupList", "Group")";
        var groupPageNonce = "@Context.Items["ScriptNonce"]";
    </script>

    <environment include="Development,CloudDevelopment">
        <link rel="stylesheet" asp-append-version="true" href="@reportServerResourceUrl/cdn/css/groups.css" integrity="@IntegrityTagHelper.GetIntegrity("wwwroot/cdn/css/groups.css")" crossorigin="anonymous" />
        <link rel="stylesheet" asp-append-version="true" href="@reportServerResourceUrl/cdn/css/theme/light.css" integrity="@IntegrityTagHelper.GetIntegrity("wwwroot/cdn/css/theme/light.css")" crossorigin="anonymous" />
        <link rel="stylesheet" asp-append-version="true" href="@reportServerResourceUrl/cdn/css/addgroup.css" integrity="@IntegrityTagHelper.GetIntegrity("wwwroot/cdn/css/addgroup.css")" crossorigin="anonymous" />
        <link rel="stylesheet" asp-append-version="true" href="@ServerAppConfig.CustomFontUrl(globalAppSettings?.SystemSettings?.FontPreference, reportServerResourceUrl)" />
        <script nonce="@Context.Items["ScriptNonce"]" asp-append-version="true" src="@reportServerResourceUrl/cdn/scripts/groups.js" integrity="@IntegrityTagHelper.GetIntegrity("wwwroot/cdn/scripts/groups.js")" crossorigin="anonymous"></script>
        <script nonce="@Context.Items["ScriptNonce"]" asp-append-version="true" src="~/js/localizationcontent.js?c=@System.Globalization.CultureInfo.CurrentCulture"></script>
    </environment>
    <environment exclude="Development,CloudDevelopment">
        <link rel="stylesheet" asp-append-version="true" href="@reportServerResourceUrl/cdn/css/groups.min.css" integrity="@IntegrityTagHelper.GetIntegrity("wwwroot/cdn/css/groups.min.css")" crossorigin="anonymous" />
        <link rel="stylesheet" asp-append-version="true" href="@reportServerResourceUrl/cdn/css/theme/light.min.css" integrity="@IntegrityTagHelper.GetIntegrity("wwwroot/cdn/css/theme/light.min.css")" crossorigin="anonymous" />
        <link rel="stylesheet" asp-append-version="true" href="@reportServerResourceUrl/cdn/css/addgroup.min.css" integrity="@IntegrityTagHelper.GetIntegrity("wwwroot/cdn/css/addgroup.min.css")" crossorigin="anonymous" />
        <link rel="stylesheet" asp-append-version="true" href="@ServerAppConfig.CustomFontUrl(globalAppSettings?.SystemSettings?.FontPreference, reportServerResourceUrl)" />
        <script nonce="@Context.Items["ScriptNonce"]" asp-append-version="true" src="@reportServerResourceUrl/cdn/scripts/groups.min.js" integrity="@IntegrityTagHelper.GetIntegrity("wwwroot/cdn/scripts/groups.min.js")" crossorigin="anonymous"></script>
        <script nonce="@Context.Items["ScriptNonce"]" asp-append-version="true" src="~/js/localizationcontent.js?c=@System.Globalization.CultureInfo.CurrentCulture"></script>
    </environment>

    <script nonce="@Context.Items["ScriptNonce"]" type="text/x-jsrender" id="group-profile-template">
        <a class="item-name grid-content" title="{{:~renderDoubleQuotes(GroupName)}}" data-bs-toggle="tooltip" href="@Url.Action("viewgroup", "group")/{{:GroupId}}">{{:GroupName}}</a>

        {{if DirectoryType == @((int)DirectoryType.AzureAD)}}
        <span title="Azure AD Group" class="su su-azure-ad grid-directory-icon"> </span>
        {{else DirectoryType == @((int)DirectoryType.WindowsAD)}}
        <span title="Windows AD Group" class="su su-windows-ad grid-directory-icon"> </span>
        {{/if}}
    </script>
    <script nonce="@Context.Items["ScriptNonce"]" type="text/x-jsrender" id="group-description-template">
        <span class="grid-content" title="{{:~renderDoubleQuotes(GroupDescription)}}" data-bs-toggle="tooltip">
            {{:~encodeString(GroupDescription)}}
        </span>
    </script>
    <script nonce="@Context.Items["ScriptNonce"]" type="text/x-jsrender" id="actions-template">
        <div class="user-hover-options" data-groupid="{{:GroupId}}" data-directory-type="{{:DirectoryType}}">
            @if (isAdmin || granularPermissions[PermissionEntity.AllPermissions] || granularPermissions[PermissionEntity.SpecificPermissions])
            {
                <a href="@Url.Action("grouppermission", "permission")?groupId={{:GroupId}}" title="[[[Manage Permissions]]]" data-bs-toggle="tooltip" data-groupid="{{:GroupId}}">
                    <i class="su su-manage-permission"></i>
                </a>
            }
            {{if DirectoryType == @((int)DirectoryType.AzureAD)}}
            <a href="#" class="user-add-class prevent-default-action" title="[[[You cannot add users to azure groups.]]]" data-bs-toggle="tooltip" data-bs-placement="left" data-groupid="{{:GroupId}}" data-directory-type="{{:DirectoryType}}">
                <i class="su su-user-add disabled-icon-color"></i>
            </a>
            {{else DirectoryType == @((int)DirectoryType.WindowsAD)}}
            <a href="#" class="user-add-class prevent-default-action" title="[[[You cannot add users to windows groups.]]]" data-bs-toggle="tooltip" data-bs-placement="left" data-groupid="{{:GroupId}}" data-directory-type="{{:DirectoryType}}">
                <i class="su su-user-add disabled-icon-color"></i>
            </a>
            {{else}}
            <a href="@Url.Action("editgroup", "group")?groupId={{:GroupId}}" class="user-add-class" title="[[[Add Users]]]" data-bs-toggle="tooltip" data-groupid="{{:GroupId}}" data-directory-type="{{:DirectoryType}}">
                <i class="su su-user-add"></i>
            </a>
            {{/if}}
            <a href="@Url.Action("viewgroup","group")/{{:GroupId}}" title="[[[View]]]" data-bs-toggle="tooltip" data-groupid="{{:GroupId}}">
                <i class="su su-eye"></i>
            </a>
            {{if CanDelete}}
            <a href="#" class="delete user-delete-class prevent-default-action" data-groupid="{{:GroupId}}" title="[[[Delete]]]" data-bs-toggle="tooltip" data-groupname="{{:GroupName}}">
                <i class="su su-delete"></i>
            </a>
            {{else}}
            <a href="#" class="user-delete-class prevent-default-action" data-groupid="{{:GroupId}}" title="[[[You cannot delete the administrator group.]]]" data-bs-toggle="tooltip" data-bs-placement="left" data-groupname="{{:GroupName}}">
                <i class="su su-delete disabled-icon-color"></i>
            </a>
            {{/if}}
        </div>
    </script>
    <script nonce="@Context.Items["ScriptNonce"]" type="text/javascript">
        GridLocalization();
        $(document).ready(function () {
            $("#search-groups").val("");
            addPlacehoder("#search-area");
            $("#Grid").ejGrid({
                dataSource: ej.DataManager({ url: "@Url.Action("RefreshGroup", "Group")", adaptor: "UrlAdaptor" }),
                gridLines: ej.Grid.GridLines.None,
                allowPaging: true,
                enableAltRow: false,
                locale: "en-US",
                allowSorting: true,
                allowSearching: true,
                allowSelection: true,
                allowFiltering: true,
                selectionType: ej.Grid.SelectionType.Multiple,
                selectionSettings: { selectionMode: ["row"] },
                enableRowHover: true,
                enableAltRow: false,
                dataBound: function (args) {
                    $('[data-bs-toggle="tooltip"]').tooltip();
                },
                rowDataBound: function () {
                    var height = $(".e-gridcontent").height();
                    if (height != null) {
                        rowBound();
                    }

                },
                rowSelecting: function (e) {
                    this.multiSelectCtrlRequest = true;
                },
                rowSelected: "fnGroupRowSelected",
                recordClick: "fnGroupRecordClick",
                load: "fnOnGroupfLoad",
                pageSettings: { pageSize: 20 },
                filterSettings: { filterType: "menu" },
                actionBegin: "fnOnGroupGridActionBegin",
                actionComplete: "fnOnGroupGridActionComplete",
                columns: [
                    {
                        template: true,
                        allowSorting: true,
                        allowFiltering: true,
                        headerText: "[[[Name]]]",
                        width: 105,
                        headerTemplateID: "#name-header",
                        templateID: "#group-profile-template",
                        field: "GroupName",
                        type: "string"
                    },
                    {
                        field: "GroupDescription",
                        headerText: "[[[Description]]]",
                        allowSorting: true,
                        allowFiltering: true,
                        type: "string",
                        width: 210,
                        templateID: "#group-description-template",
                        headerTemplateID: "#description-header"
                    },
                    {
                        allowSorting: false,
                        allowFiltering: false,
                        field: "UsersCount",
                        headerText: "[[[Users]]]",
                        type: "string",
                        width: 25
                    },
                    {
                        template: true,
                        allowSorting: false,
                        allowFiltering: false,
                        headerText: "[[[Actions]]]",
                        templateID: "#actions-template",
                        width: 75
                    }

                ]

            });

            $.views.helpers({
                renderDoubleQuotes: function (inputString) {
                    return inputString.replace(new RegExp("\"", 'g'), '&quot;');
                }
            });

            $.views.helpers({
                encodeString: function (inputString) {
                    return inputString.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
                }
            });

            $("#new-group-area").ejDialog({
                width: "500px",
                showOnInit: false,
                allowDraggable: true,
                enableResize: false,
                showHeader: false,
                title: "[[[Add New Group]]]",
                enableModal: true,
                closeOnEscape: true,
                close: ''
            });
            $("#delete-group-area").ejDialog({
                width: "499px",
                showOnInit: false,
                allowDraggable: true,
                enableResize: false,
                showHeader: false,
                title: "[[[Delete Group]]]",
                enableModal: true,
                closeOnEscape: true,
                close: ''
            });

            var deleteGroupAreaWaitingPopupTemplateId = createLoader("delete-group-area_wrapper");
			$("#delete-group-area_wrapper").ejWaitingPopup({ template:$("#" + deleteGroupAreaWaitingPopupTemplateId) });
            var newGroupAreaWaitingPopupTemplateId = createLoader("new-group-area_wrapper");
			$("#new-group-area_wrapper").ejWaitingPopup({ template:$("#" + newGroupAreaWaitingPopupTemplateId) });
            $("#groups-delete-confirmation").ejDialog({
                width: "378px",
                showOnInit: false,
                allowDraggable: false,
                enableResize: false,
                height: "auto",
                showHeader: false,
                title: "[[[Delete Groups]]]",
                enableModal: true,
                close: "onDeleteDialogClose",
                closeOnEscape: true,
                open: "onDeleteDialogOpen"
            });
            var groupDeleteWaitingPopupTemplateId = createLoader("groups-delete-confirmation_wrapper");
            $("#groups-delete-confirmation_wrapper").ejWaitingPopup({ template:$("#" + groupDeleteWaitingPopupTemplateId) });
            var grupBodyWaitingPopupTemplateId = createLoader("body");
            $("#body").ejWaitingPopup({ template: $("#" + grupBodyWaitingPopupTemplateId) });
        });


    </script>

    <script nonce="@Context.Items["ScriptNonce"]" type="text/x-jsrender" id="name-header">
        <div class="item-name">[[[Name]]]</div>
    </script>
    <script nonce="@Context.Items["ScriptNonce"]" type="text/x-jsrender" id="description-header">
        <div class="item-header">[[[Description]]]</div>
    </script>
    @await Html.PartialAsync("~/Views/Shared/_LoaderIcon.cshtml")
}
@section MainSection{
    @await Html.PartialAsync("../UserManagement/_UserMenu")


    <div id="group-directory-container" role="tabpanel" class="admin-page-container col-lg-12 float-end" aria-labelledby="active-directory-settings-link">

        <div class="row admin-page-header">
            <div class="col-12 d-flex justify-content-between align-items-center flex-wrap no-padding">
                <div class="d-flex align-items-center">
                    <h2 class="page-title no-padding">[[[GROUPS]]] (<span id="group-count">@ViewBag.groupCount</span>)</h2>
                </div>
                <div id="group-header" class="d-flex justify-content-end align-items-start flex-wrap">
                    <ul class="list-unstyled d-flex flex-wrap justify-content-end align-items-start mb-0 p-0 groups-menu">
                        @if (isAdmin || granularPermissions[PermissionEntity.UsersandGroups] || granularPermissions[PermissionEntity.SpecificGroup])
                        {
                            <li class="flying-add d-flex align-items-center gap-2" id="add-user-in-groups">
                                <button class="btn btn-danger fw-semibold critical-action-button app-btn-danger group-delete-button"
                                        title="[[[Delete selected Groups]]]"
                                        data-directory-type="@((int)DirectoryType.AzureAD)"
                                        data-groupid="1">
                                    [[[Delete Groups]]]
                                </button>
                            </li>
                        }
                        @if ((isAdmin || granularPermissions[PermissionEntity.UsersandGroups]) && ViewBag.AzureAD != null)
                        {
                            <li>
                                <a href="@Url.Action("AzureADGroup", "group")"
                                   class="btn btn-link link-button app-btn-link synchronize-groups"
                                   title="[[[Synchronize groups with Azure AD]]]">
                                    [[[Azure AD Synchronization]]]
                                </a>
                            </li>
                        }
                        @if (!(groupImport.HideCreateGroup && groupImport.HideAzureAD && groupImport.HideWindowsAD))
                        {
                            <li class="dropdown">
                                @if (isAdmin || granularPermissions[PermissionEntity.UsersandGroups] || ViewBag.IsUserHasCreateGroupPermission)
                                {
                                    <button class="btn dropdown-toggle primary-button app-btn-primary"
                                            data-bs-toggle="dropdown"
                                            id="new-user-dropdown"
                                            title="[[[Add new group]]]"
                                            aria-expanded="false">
                                        <span>[[[New Group]]]</span><span class="caret"></span>
                                    </button>
                                }
                                <ul class="dropdown-menu" role="menu" id="dropdown-options">
                                    @if (!groupImport.HideCreateGroup)
                                    {
                                        <li id="new-group-button" title="[[[Add new group]]]">
                                            <a href="#" class="dropdown-item prevent-default-action"
                                               data-bs-toggle="tooltip"
                                               data-bs-placement="top"
                                               title="[[[Add new group]]]">
                                                <i class="su su-group-1 me-2"></i><span>[[[Create Group]]]</span>
                                            </a>
                                        </li>
                                    }
                                    @if (ServerAppConfig.IsSelfHosted && !isAzureApplication && enableWindowsAD && !groupImport.HideWindowsAD && (isAdmin || granularPermissions[PermissionEntity.UsersandGroups]))
                                    {
                                        <li>
                                            <a href="@Url.Action("ActiveDirectoryGroupImport", "group")"
                                               class="dropdown-item"
                                               data-bs-toggle="tooltip"
                                               data-bs-placement="top"
                                               title="[[[Import groups from Active Directory]]]">
                                                <i class="su su-windows-ad me-2"></i><span>[[[Import from Active Directory]]]</span>
                                            </a>
                                        </li>
                                    }
                                    @if ((isAdmin && !groupImport.HideAzureAD) || granularPermissions[PermissionEntity.UsersandGroups])
                                    {
                                        <li>
                                            <a href="@Url.Action("AzureADGroupImport", "group")"
                                               class="dropdown-item"
                                               data-bs-toggle="tooltip"
                                               data-bs-placement="top"
                                               title="[[[Import groups from Azure AD]]]">
                                                <i class="su su-azure-ad me-2"></i><span>[[[Import from Azure AD]]]</span>
                                            </a>
                                        </li>
                                    }
                                </ul>
                            </li>
                        }
                    </ul>
                    <input type="hidden" name="GroupCount" id="group-count-text" value="@ViewBag.groupCount" />
                    <input type="hidden" id="azureadgroup-count-text" value="@ViewBag.AzureADGroupCount" />
                </div>
            </div>
        </div>
        <div id="grid-container" class="col-lg-12 admin-page-body">
            <div id="search-area" class="float-end">
                <input type="text" id="search-groups" class="float-start no-margin" placeholder="[[[Search groups]]]" />
                <span class="su close-icon su-inner-close float-start no-margin" id="clear-search" title="[[[Clear search]]]"></span>
                <span class="su su-search search-group float-start no-margin" title="[[[Search]]]"></span>
            </div>
            <div id="Grid" data-gridName="Group" class="float-end">
            </div>
            @if (ViewBag.AzureADGroupCount > 0)
            {
                <div id="azure-ad-indication" class="ad-azure-indication col-lg-12"><span class="su su-azure-ad"> </span> - <span class="margin">[[[Azure AD group]]]</span></div>
            }
            @if (ViewBag.AdgroupCount > 0)
            {
                <div id="windows-ad-indication" class="ad-azure-indication col-lg-12"><span class="su su-windows-ad"> </span> - <span class="margin">[[[Windows AD group]]]</span></div>
            }
        </div>
        <div id="new-group-area" class="no-padding">
            <div id="new-group" class="float-end">
                @await Html.PartialAsync("~/Views/Group/_AddGroup.cshtml")
            </div>
        </div>
        <div id="delete-group-area" class="no-padding">
            <div id="delete-group-wrap" class="float-end"></div>
        </div>
    </div>
    @await Html.PartialAsync("../Group/_MultipleGroupDeleteDialog")
}